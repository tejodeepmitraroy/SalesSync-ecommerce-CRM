{
  "D:\\TEJODEEP_FILE\\Websites\\My Business Client Projects\\SalesSync-Ecommerce-CRM\\apps\\email\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "D:\\TEJODEEP_FILE\\Websites\\My Business Client Projects\\SalesSync-Ecommerce-CRM\\apps\\email\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "ddkkhaaa",
      "app": "ddkkhaaa-app",
      "service": "email-service",
      "useDotenv": true,
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "ap-south-1",
        "stage": "prod",
        "memorySize": 512,
        "timeout": 10,
        "environment": {
          "PORT": "8000",
          "RESEND_API_KEY": "<REDACTED>"
        },
        "versionFunctions": true,
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "iot:*"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "SendEmailLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/email-service-prod-sendEmail"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "email-service",
                          "prod",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "iot:*"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "email-service",
                      "prod",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "SendEmailLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
                  "S3Key": "serverless/email-service/prod/1751404096057-2025-07-01T21:08:16.057Z/email-service.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "email-service-prod-sendEmail",
                "MemorySize": 128,
                "Timeout": 10,
                "Description": "Submit candidate information and starts interview process.",
                "Environment": {
                  "Variables": {
                    "PORT": "8000",
                    "RESEND_API_KEY": "<REDACTED>",
                    "SLS_IOT_ENDPOINT": "a2jh8mquefd4f0-ats.iot.ap-south-1.amazonaws.com",
                    "SLS_SERVICE": "email-service",
                    "SLS_STAGE": "prod",
                    "SLS_FUNCTION": "sendEmail"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SendEmailLogGroup"
              ]
            },
            "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SendEmailLambdaFunction"
                },
                "CodeSha256": "nOD2sEPVuLR9uUXdd91lwKwy95wO30vahHXDq9ELghA=",
                "Description": "Submit candidate information and starts interview process."
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "prod-email-service",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceSendDashemail": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "send-email",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSendDashemailPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSendDashemail"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SendEmailLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SendEmailLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1751404090284": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "prod"
              },
              "DependsOn": [
                "ApiGatewayMethodSendDashemailPost"
              ]
            },
            "SendEmailLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SendEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
              "Export": {
                "Name": "sls-email-service-prod-ServerlessDeploymentBucketName"
              }
            },
            "SendEmailLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0"
              },
              "Export": {
                "Name": "sls-email-service-prod-SendEmailLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/prod"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-email-service-prod-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "sendEmail": {
          "handler": "index.handler",
          "memorySize": 128,
          "description": "Submit candidate information and starts interview process.",
          "events": [
            {
              "http": {
                "path": "send-email",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "email-service-prod-sendEmail",
          "originalHandler": "src/index.handler",
          "runtime": "nodejs20.x",
          "environment": {
            "SLS_IOT_ENDPOINT": "a2jh8mquefd4f0-ats.iot.ap-south-1.amazonaws.com",
            "SLS_SERVICE": "email-service",
            "SLS_STAGE": "prod",
            "SLS_FUNCTION": "sendEmail"
          },
          "package": {
            "artifact": "D:\\TEJODEEP_FILE\\Websites\\My Business Client Projects\\SalesSync-Ecommerce-CRM\\apps\\email\\.serverless\\email-service.zip"
          },
          "memory": 128,
          "timeout": 10,
          "vpc": {},
          "versionLogicalId": "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0"
        }
      },
      "plugins": [
        "serverless-offline",
        "serverless-dotenv-plugin"
      ],
      "custom": {
        "serverless-offline": {
          "httpPort": 8000
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-south-1",
      "stage": "prod",
      "memorySize": 512,
      "timeout": 10,
      "environment": {
        "PORT": "8000",
        "RESEND_API_KEY": "<REDACTED>"
      },
      "versionFunctions": true,
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "iot:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "SendEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/email-service-prod-sendEmail"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "email-service",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "iot:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "email-service",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SendEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
                "S3Key": "serverless/email-service/prod/1751404096057-2025-07-01T21:08:16.057Z/email-service.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "email-service-prod-sendEmail",
              "MemorySize": 128,
              "Timeout": 10,
              "Description": "Submit candidate information and starts interview process.",
              "Environment": {
                "Variables": {
                  "PORT": "8000",
                  "RESEND_API_KEY": "<REDACTED>",
                  "SLS_IOT_ENDPOINT": "a2jh8mquefd4f0-ats.iot.ap-south-1.amazonaws.com",
                  "SLS_SERVICE": "email-service",
                  "SLS_STAGE": "prod",
                  "SLS_FUNCTION": "sendEmail"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendEmailLogGroup"
            ]
          },
          "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendEmailLambdaFunction"
              },
              "CodeSha256": "nOD2sEPVuLR9uUXdd91lwKwy95wO30vahHXDq9ELghA=",
              "Description": "Submit candidate information and starts interview process."
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-email-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceSendDashemail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "send-email",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSendDashemailPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSendDashemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SendEmailLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1751404090284": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodSendDashemailPost"
            ]
          },
          "SendEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
            "Export": {
              "Name": "sls-email-service-prod-ServerlessDeploymentBucketName"
            }
          },
          "SendEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0"
            },
            "Export": {
              "Name": "sls-email-service-prod-SendEmailLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-email-service-prod-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "9hpr5JpcbLqNx9pXd9",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "serviceRawFile": "\r\norg: ddkkhaaa\r\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\r\napp: ddkkhaaa-app\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: email-service\r\nuseDotenv: true\r\n \r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: ap-south-1\r\n  stage: prod\r\n  memorySize: 512\r\n  timeout: 10\r\n  environment:\r\n    PORT: 8000\r\n \r\nfunctions:\r\n  sendEmail:\r\n    handler: src/index.handler\r\n    memorySize: 128\r\n    description: Submit candidate information and starts interview process.\r\n    events:\r\n      - http: \r\n          path: send-email\r\n          method: post\r\n\r\nplugins:\r\n  - serverless-offline\r\n  - serverless-dotenv-plugin\r\n  \r\n\r\ncustom:\r\n  serverless-offline:\r\n    httpPort: 8000\r\n",
    "command": [
      "dev"
    ],
    "options": {},
    "orgId": "5d1f313b-64c3-4fbc-bc30-dd687587a03e",
    "orgName": "ddkkhaaa",
    "userId": "P8J4nTcZ5Y5ssQxPLx",
    "userName": "ddkkhaaa2",
    "serviceProviderAwsAccountId": "343218219837",
    "serviceProviderAwsCfStackName": "email-service-prod",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:343218219837:stack/email-service-prod/e63344e0-56be-11f0-9b4f-065b2475b007",
    "serviceProviderAwsCfStackCreated": "2025-07-01T21:03:55.534Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "SendEmailLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:343218219837:function:email-service-prod-sendEmail:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-email-service-prod-SendEmailLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://pdcgp8wyo7.execute-api.ap-south-1.amazonaws.com/prod",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-email-service-prod-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
        "ExportName": "sls-email-service-prod-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "SendEmailLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/email-service-prod-sendEmail"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "email-service",
                      "prod",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/email-service-prod*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "iot:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "email-service",
                  "prod",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "SendEmailLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
              "S3Key": "serverless/email-service/prod/1751404096057-2025-07-01T21:08:16.057Z/email-service.zip"
            },
            "Handler": "index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "email-service-prod-sendEmail",
            "MemorySize": 128,
            "Timeout": 10,
            "Description": "Submit candidate information and starts interview process.",
            "Environment": {
              "Variables": {
                "PORT": "8000",
                "RESEND_API_KEY": "<REDACTED>",
                "SLS_IOT_ENDPOINT": "a2jh8mquefd4f0-ats.iot.ap-south-1.amazonaws.com",
                "SLS_SERVICE": "email-service",
                "SLS_STAGE": "prod",
                "SLS_FUNCTION": "sendEmail"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SendEmailLogGroup"
          ]
        },
        "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SendEmailLambdaFunction"
            },
            "CodeSha256": "nOD2sEPVuLR9uUXdd91lwKwy95wO30vahHXDq9ELghA=",
            "Description": "Submit candidate information and starts interview process."
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "prod-email-service",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceSendDashemail": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "send-email",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodSendDashemailPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSendDashemail"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SendEmailLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SendEmailLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1751404090284": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "prod"
          },
          "DependsOn": [
            "ApiGatewayMethodSendDashemailPost"
          ]
        },
        "SendEmailLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SendEmailLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-south-1-b65283a9-2c64",
          "Export": {
            "Name": "sls-email-service-prod-ServerlessDeploymentBucketName"
          }
        },
        "SendEmailLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SendEmailLambdaVersionDYAiUJ5PwT7g37335LBcKpR049RCNUYA9wEgjIOt0"
          },
          "Export": {
            "Name": "sls-email-service-prod-SendEmailLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/prod"
              ]
            ]
          },
          "Export": {
            "Name": "sls-email-service-prod-ServiceEndpoint"
          }
        }
      }
    }
  }
}